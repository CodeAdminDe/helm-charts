# Default values for bind9-hidden-primary.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
# (Only replicaCount 1 supported)
replicaCount: 1

# -- This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP
  externalTrafficPolicy: Cluster
  port: 5353

# -- The statistics channel provides a XML and JSON (/json) HTTP endpoint to monitor bind.
#It is not protected. Use a reverse-proxy with basic-auth and ssl, if you want to expose it externally.
statisticsChannels:
  enabled: false
  type: ClusterIP
  port: 8053
  externalTrafficPolicy: Cluster

# -- This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
# Override the image tag, whose default is the chart appVersion.
image:
  repository: internetsystemsconsortium/bind9
  pullPolicy: IfNotPresent
  tag: ""

# -- This sets the job container image to use.
# The image needs kubectl and bind9 already present in order to fullfill it's job and to be used with a restricted namespace policy.
jobImage:
  repository: ghcr.io/codeadminde/bind9-kubectl
  tag: "latest"

# -- This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# -- This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# -- This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# -- This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# -- This is for the pod-level security attributes and common container settings.
# More information: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext:
  fsGroup: 1000

# -- This is for the scurityContext at container level.
# Note that container settings do not affect the Pod's Volumes.
# More information: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

# -- Set a RuntimeClass to execute the containers with a custom runtime configuration.
# Register a runtimeClass within your cluster beforehand.
# @raw
#
# <details>
# <summary>Motivation (Expand)</summary>
#
# > The container runtime configuration is used to run a Pod's containers. . . .
# > For example, if part of your workload deserves a high level of information security assurance, you might choose to schedule those Pods so that they run in a container runtime that uses hardware virtualization.
# > You'd then benefit from the extra isolation of the alternative runtime, at the expense of some additional overhead. . . .
#
# <i>Source and more informations: https://kubernetes.io/docs/concepts/containers/runtime-class/ </i>
#
# </details>
#
runtimeClass:
  # -- (string/runtimeClassName) Sets the runtimeClass for the DaemonSet / ReplicaSet pods. Takes the runtimeClass name, or "" (default).
  pods: ""
  # -- (string/runtimeClassName) Sets the runtimeClass for the pods for the job execution. Takes the runtimeClass name, or "" (default).
  jobs: ""
  # -- (string/runtimeClassName) Sets the runtimeClass for the containers which gets executed by the test hook. Takes the runtimeClass name, or "" (default).
  tests: ""

# -- This configures the TSIG Key HMAC algo and Key Name which will be used within the configuration of bind9. Usually, you won't need to change these defaults.
# General details about the TSIG implementation could be found at: https://www.isc.org/docs/2021-bind-mgmt-05-webinar.pdf
env:
  tsigHmacFunc: HMAC-SHA512
  tsigKeyname: rndc-allow-transfer-tsigkey

# -- List of upstream dns servers that are allowed to query the hidden primary (AXFR requests) and getting notified (Separator: ";")
# Provide your providers upstream IP and/or IPs.
providerPrimaryIpList: "127.0.0.1"


# -- Enable / Disable usage of proxyv2 protocol.
# WARNING: You should apply a custom NetworkPolicy to avoid spoofing, when using this feature!
# more details: https://kb.isc.org/docs/proxyv2-support-in-bind-9
proxyv2:
  enabled: false
  # -- List of addresses / networks which are allowed to send PROXYv2 headers. (Separator: ";")
  # Provide your cluster ingress ips / range.
  allowProxyIpList: "127.0.0.1/32"

# -- Zone details
# Provide your zone details to configure the nameserver to match our needs.
# @raw
#
# <details>
# <summary> Object param description (Expand)</summary>
#
# ```
# zone:
#   name: Name of the zone that this bind deployment is authorative hidden primary
#   soa:
#     nsHostname: nameserver hostname for soa record... just use whatever you like, it does not need to be resolvable.
#     hostmasterMail: The mail that you like to publish withn the soa record. replace the @-sign by a dot, like: hostmaster@example.com -> hostmaster.example.com
#   spfTxtRecordValue: We set the SPF record to disallow all servers sending mails with this domain. You could overwirte it as you wish.
#   providerPrimaryNameservers: Provide a list of nameservers that are resposible for the zone. These are typically the providers primary nameservers.
#     - ns1.provider.tld
#     - ns2.provider.tld
# ```
#
# </details>
#
zone:
  name: myzone.sample-chart.example.com # <== Provide your zone.
  soa:
    nsHostname: ns1
    hostmasterMail: hostmaster.example.com # <== Proivde your mail address.
  spfTxtRecordValue: "v=spf1 -all"
  providerPrimaryNameservers: # <== Provide your provider primary nameserver/s
    - a.sample-chart.example.com
    - b.sample-chart.example.com
    - c.sample-chart.example.com

# -- This configures the persistens of your release.
# The bind9 service uses persistent storage to save it's current zone database
# and to ensure all running containers does share the same details.
# See values.yaml for a detailed sample.
persistence:
  enabled: true # false -> app uses emptyDir (with persistence.emptyDirSizeLimit) // true -> app uses pvc created by helm. (or existingClaim, if provided)
  emptyDirSizeLimit: 500Mi
  cacheDirSizeLimit: 500Mi
  size: 1Gi
  storageClass: "longhorn" # <== Provide your storageclass or leave it empty to use the default one.
  accessModes:
  - ReadWriteOnce
  #- ReadWriteOnce
  ## Use an existing PVC instead
  # existingClaim: "my-pvc"

# -- Provide your own includes.d/, named.conf and/or entrypoint configMap to override chart-included configurations.
existingConfigMap:
  includes: ""
  named: ""
  zonedbs: ""
  run: ""

# -- Specify default resources for the
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- This is to setup the liveness probe.
# By default, we're using the tcpSocket to provide the liveness state.
# More information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  tcpSocket:
    port: 5353
  initialDelaySeconds: 5
  periodSeconds: 10

# -- This is to setup the readiness probe.
# By default, we're using the tcpSocket to provide the readiness state.
# More information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  tcpSocket:
    port: 5353
  initialDelaySeconds: 5
  periodSeconds: 10

# -- This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
